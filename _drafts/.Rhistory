int addTwo(int x, int y) {
int sum = x + y;
return sum;
}
')
addTwo(1, 2)
addTwo(1.9, 2.9)
cppFunction('
int addTwo(double x, double y) {
int sum = x + y;
return sum;
}
')
addTwo(1, 2)
addTwo(1.9, 2.9)
require(devtools)
install_github("slidify", "ramnathv")
install_github("ramnathv/slidify")
install_github("ramnathv/slidifyLibraries")
library(slidify)
install.packages("withr")
install.packages("rscproxy")
install.packages("refund")
library("refund", lib.loc="D:/Program Files/R/R-3.2.3/library")
rm(list = ls())
gc()
library(Rcpp)
library(RcppArmadillo)
cppFunction("
double abs_diff(double x, double y) {
return abs(x - y);
}
")
abs_diff(1,2)
abs_diff(1,99)
abs_diff(1,NA)
cppFunction("
double abs_diff(double x, double y) {
if(is_na(x) | is_na(y)) {
return 0;
} else {
return abs(x - y);
}
}
")
cppFunction("
double abs_diff(double x, double y) {
if(NumericVector::is_na(x) | NumericVector::is_na(y)) {
return 0;
} else {
return abs(x - y);
}
}
")
abs_diff(1,NA)
getwd()
setwd('E:/Documents/cgte88586.github.io/_drafts')
sourceCpp("examples/boost.cpp")
sourceCpp("examples/manhattan_dist_C.cpp")
sourceCpp("manhattan_dist_C.cpp")
sourceCpp("manhattan_dist_C.cpp")
sourceCpp("manhattan_dist_C.cpp")
see <- matrix(sample(c(0:2, NA), 10, replace=T), 2)
sourceCpp("manhattan_dist_C.cpp")
see
manhattan_dist_C(see)
sourceCpp("manhattan_dist_C.cpp")
sourceCpp("manhattan_dist_C.cpp")
sourceCpp("manhattan_dist_C.cpp")
manhattan_dist_C(see)
see
sourceCpp("manhattan_dist_C.cpp")
manhattan_dist_C(see)
0
sourceCpp("manhattan_dist_C.cpp")
sourceCpp("manhattan_dist_C.cpp")
manhattan_dist_C(see)
sourceCpp("manhattan_dist_C.cpp")
sourceCpp("manhattan_dist_C.cpp")
see
manhattan_dist_C(see)
sourceCpp("manhattan_dist_C.cpp")
manhattan_dist_C(see)
see
see <- matrix(sample(c(0:2, NA), 10, replace=T), 2)
see
manhattan_dist_C(see)
see <- matrix(sample(c(0:2, NA), 15, replace=T), 3)
see
manhattan_dist_C(see)
sourceCpp("manhattan_dist_C.cpp")
see
manhattan_dist_C(see)
sourceCpp("manhattan_dist_C.cpp")
see
manhattan_dist_C(see)
manhattan_dist_C(see)
sourceCpp("manhattan_dist_C.cpp")
manhattan_dist_C(see)
sourceCpp("manhattan_dist_C.cpp")
see
manhattan_dist_C(see)
sourceCpp("manhattan_dist_C.cpp")
manhattan_dist_C(see)
library(microbenchmark)
see <- matrix(sample(c(0:2, NA), 3e4, replace=T), 3)
microbenchmark(
manhattan_dist_C(see),
dist(see, method = "manhattan"),
times=10)
see <- matrix(sample(c(0:2, NA), 3e5, replace=T), 3)
manhattan_dist_C(see)
microbenchmark(
manhattan_dist_C(see),
dist(see, method = "manhattan"),
times=10)
see <- matrix(sample(c(0:2, NA), 3e5, replace=T), 5)
manhattan_dist_C(see)
microbenchmark(
manhattan_dist_C(see),
dist(see, method = "manhattan"),
times=10)
see <- matrix(sample(c(0:2, NA), 15, replace=T), 3)
see
manhattan_dist_C(see)
dist(see, method = "manhattan")
library("varComp", lib.loc="D:/Program Files/R/R-3.2.3/library")
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ).
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ).
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) )
see
manhattan_dist_C(see)
microbenchmark(
manhattan_dist_C(see),
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ),
times=10)
see <- matrix(sample(c(0:2, NA), 3e5, replace=T), 3)
microbenchmark(
manhattan_dist_C(see),
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ),
times=10)
see <- matrix(sample(c(0:2, NA), 20e5, replace=T), 20)
microbenchmark(
manhattan_dist_C(see),
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ),
times=10)
cppFunction("NumericMatrix mdC(NumericMatrix X) {
int n = X.nrow(), p = X.ncol();
NumericMatrix out(n, n), out_c(n, n);
for (int i = 0; i < n; i++) {
for (int j = i + 1; j < n; j++) {
double total = 0, total_c = 0;
for (int k = 0; k < p; k++) {
double xi = X(i, k), xj = X(j, k);
if (!NumericVector::is_na(xi) && !NumericVector::is_na(xj)) {
total += abs(xi - xj);
total_c++;
}
}
if (total_c == p) {
out(i, j) = total;
}
else {
out(i, j) = total / total_c * p;
}
}
}
return out;
}")
microbenchmark(
mdC(see),
manhattan_dist_C(see),
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ),
times=1)
microbenchmark(
mdC(see),
manhattan_dist_C(see),
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ),
times=1)
microbenchmark(
mdC(see),
manhattan_dist_C(see),
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ),
times=1)
see <- matrix(sample(c(0:2, NA), 15, replace=T), 3)
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) )
mdC(see)
see
cppFunction("NumericMatrix mdC(NumericMatrix X) {
int n = X.nrow(), p = X.ncol();
NumericMatrix out(n, n), out_c(n, n);
for (int i = 0; i < n; i++) {
for (int j = i + 1; j < n; j++) {
int total = 0, total_c = 0;
for (int k = 0; k < p; k++) {
double xi = X(i, k), xj = X(j, k);
if (!NumericVector::is_na(xi) && !NumericVector::is_na(xj)) {
total += abs(xi - xj);
total_c++;
}
}
out(i, j) = 1 - .5 * total / total_c;
}
}
return out;
}")
mdC(see)
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) )
microbenchmark(
mdC(see),
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ),
times=1)
microbenchmark(
mdC(see),
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ),
times=1)
microbenchmark(
mdC(see),
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ),
times=1)
microbenchmark(
mdC(see),
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ),
times=1)
microbenchmark(
mdC(see),
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ),
times=1)
microbenchmark(
mdC(see),
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ),
times=1)
microbenchmark(
mdC(see),
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ),
times=1)
microbenchmark(
mdC(see),
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ),
times=1)
cppFunction("arma::mat mdC2(arma::mat X) {
int n = X.n_rows, p = X.n_cols;
arma::mat out(n, n), out_c(n, n);
for (int i = 0; i < n; i++) {
for (int j = i + 1; j < n; j++) {
int total = 0, total_c = 0;
for (int k = 0; k < p; k++) {
double xi = X(i, k), xj = X(j, k);
if (!NumericVector::is_na(xi) && !NumericVector::is_na(xj)) {
total += abs(xi - xj);
total_c++;
}
}
out(i, j) = 1 - .5 * total / total_c * p;
}
}
return out;
}", depends="RcppArmadillo")
mdC2(see)
cppFunction("arma::mat mdC2(arma::mat X) {
int n = X.n_rows, p = X.n_cols;
arma::mat out(n, n, arma:fill:zeros), out_c(n, n, arma:fill:zeros);
for (int i = 0; i < n; i++) {
for (int j = i + 1; j < n; j++) {
int total = 0, total_c = 0;
for (int k = 0; k < p; k++) {
double xi = X(i, k), xj = X(j, k);
if (!NumericVector::is_na(xi) && !NumericVector::is_na(xj)) {
total += abs(xi - xj);
total_c++;
}
}
out(i, j) = 1 - .5 * total / total_c * p;
}
}
return out;
}", depends="RcppArmadillo")
cppFunction("arma::mat mdC2(arma::mat X) {
int n = X.n_rows, p = X.n_cols;
arma::mat out(n, n, arma::fill::zeros), out_c(n, n, arma::fill::zeros);
for (int i = 0; i < n; i++) {
for (int j = i + 1; j < n; j++) {
int total = 0, total_c = 0;
for (int k = 0; k < p; k++) {
double xi = X(i, k), xj = X(j, k);
if (!NumericVector::is_na(xi) && !NumericVector::is_na(xj)) {
total += abs(xi - xj);
total_c++;
}
}
out(i, j) = 1 - .5 * total / total_c * p;
}
}
return out;
}", depends="RcppArmadillo")
mdC2(see)
mdC(see)
cppFunction("NumericMatrix mdC(NumericMatrix X) {
int n = X.nrow(), p = X.ncol();
NumericMatrix out(n, n), out_c(n, n);
for (int i = 0; i < n; i++) {
for (int j = i + 1; j < n; j++) {
int total = 0, total_c = 0;
for (int k = 0; k < p; k++) {
int xi = X(i, k), xj = X(j, k);
if (!NumericVector::is_na(xi) && !NumericVector::is_na(xj)) {
total += abs(xi - xj);
total_c++;
}
}
out(i, j) = 1 - .5 * total / total_c;
}
}
return out;
}")
cppFunction("arma::mat mdC2(arma::mat X) {
int n = X.n_rows, p = X.n_cols;
arma::mat out(n, n, arma::fill::zeros), out_c(n, n, arma::fill::zeros);
for (int i = 0; i < n; i++) {
for (int j = i + 1; j < n; j++) {
int total = 0, total_c = 0;
for (int k = 0; k < p; k++) {
int xi = X(i, k), xj = X(j, k);
if (!NumericVector::is_na(xi) && !NumericVector::is_na(xj)) {
total += abs(xi - xj);
total_c++;
}
}
out(i, j) = 1 - .5 * total / total_c * p;
}
}
return out;
}", depends="RcppArmadillo")
mdC(see)
mdC2(see)
cppFunction("NumericMatrix mdC(NumericMatrix X) {
int n = X.nrow(), p = X.ncol();
NumericMatrix out(n, n), out_c(n, n);
for (int i = 0; i < n; i++) {
for (int j = i + 1; j < n; j++) {
double total = 0, total_c = 0;
for (int k = 0; k < p; k++) {
double xi = X(i, k), xj = X(j, k);
if (!NumericVector::is_na(xi) && !NumericVector::is_na(xj)) {
total += abs(xi - xj);
total_c++;
}
}
out(i, j) = 1 - .5 * total / total_c;
}
}
return out;
}")
cppFunction("arma::mat mdC2(arma::mat X) {
int n = X.n_rows, p = X.n_cols;
arma::mat out(n, n, arma::fill::zeros), out_c(n, n, arma::fill::zeros);
for (int i = 0; i < n; i++) {
for (int j = i + 1; j < n; j++) {
double total = 0, total_c = 0;
for (int k = 0; k < p; k++) {
double xi = X(i, k), xj = X(j, k);
if (!NumericVector::is_na(xi) && !NumericVector::is_na(xj)) {
total += abs(xi - xj);
total_c++;
}
}
out(i, j) = 1 - .5 * total / total_c * p;
}
}
cppFunction("NumericMatrix mdC(NumericMatrix X) {
int n = X.nrow(), p = X.ncol();
NumericMatrix out(n, n), out_c(n, n);
for (int i = 0; i < n; i++) {
for (int j = i + 1; j < n; j++) {
double total = 0, total_c = 0;
for (int k = 0; k < p; k++) {
double xi = X(i, k), xj = X(j, k);
if (!NumericVector::is_na(xi) && !NumericVector::is_na(xj)) {
total += abs(xi - xj);
total_c++;
}
}
out(i, j) = 1 - .5 * total / total_c;
}
}
return out;
}")
cppFunction("arma::mat mdC2(arma::mat X) {
int n = X.n_rows, p = X.n_cols;
arma::mat out(n, n, arma::fill::zeros), out_c(n, n, arma::fill::zeros);
for (int i = 0; i < n; i++) {
for (int j = i + 1; j < n; j++) {
double total = 0, total_c = 0;
for (int k = 0; k < p; k++) {
double xi = X(i, k), xj = X(j, k);
if (!NumericVector::is_na(xi) && !NumericVector::is_na(xj)) {
total += abs(xi - xj);
total_c++;
}
}
out(i, j) = 1 - .5 * total / total_c * p;
}
}
return out;
}", depends="RcppArmadillo")
mdC(see)
mdC2(see)
cppFunction("arma::mat mdC2(arma::mat X) {
int n = X.n_rows, p = X.n_cols;
arma::mat out(n, n, arma::fill::zeros), out_c(n, n, arma::fill::zeros);
for (int i = 0; i < n; i++) {
for (int j = i + 1; j < n; j++) {
double total = 0;
int total_c = 0;
for (int k = 0; k < p; k++) {
double xi = X(i, k), xj = X(j, k);
if (!NumericVector::is_na(xi) && !NumericVector::is_na(xj)) {
total += abs(xi - xj);
total_c++;
}
}
out(i, j) = 1 - .5 * total / total_c * p;
}
}
return out;
}", depends="RcppArmadillo")
mdC2(see)
mdC(see)
cppFunction("NumericMatrix mdC(NumericMatrix X) {
int n = X.nrow(), p = X.ncol();
NumericMatrix out(n, n), out_c(n, n);
for (int i = 0; i < n; i++) {
for (int j = i + 1; j < n; j++) {
double total = 0, total_c = 0;
for (int k = 0; k < p; k++) {
double xi = X(i, k), xj = X(j, k);
if (!NumericVector::is_na(xi) && !NumericVector::is_na(xj)) {
total += abs(xi - xj);
total_c++;
}
}
out(i, j) = 1 - .5 * total / total_c;
}
}
return out;
}")
see <- matrix(sample(c(0:2, NA), 10e5, replace=T), 3)
see <- matrix(sample(c(0:2, NA), 10e5, replace=T), 5)
microbenchmark(
mdC(see),
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ),
times=1)
microbenchmark(
mdC(see),
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ),
times=1)
microbenchmark(
mdC(see),
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ),
times=1)
microbenchmark(
mdC(see),
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ),
times=1)
see <- matrix(sample(c(0:2, NA), 10e6, replace=T), 5)
see
see <- matrix(sample(c(0:2, NA), 10e6, replace=T), 5)
microbenchmark(
mdC(see),
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ),
times=1)
microbenchmark(
mdC(see),
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ),
times=1)
microbenchmark(
mdC(see),
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ),
times=1)
cppFunction("
NumericVector sss(NumericVector x) {
return x(!NumericVector::is_na(x))
}
")
cppFunction("
BoolVector sss(NumericVector x) {
return NumericVector::is_na(x);
}
")
abs_diff(1,NA)
cppFunction("
NumericVecto sss(NumericVector x) {
return x(NumericVector::is_na(x));
}
")
cppFunction("
NumericVectorsss(NumericVector x) {
return x(NumericVector::is_na(x));
}
")
cppFunction("
NumericVector sss(NumericVector x) {
return x(NumericVector::is_na(x));
}
")
see <- matrix(sample(c(0:2, NA), 10e6, replace=T), 10)
microbenchmark(
mdC(see),
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) ),
times=1)
1 - as.matrix(dist(see, method='manhattan') * .5 /max(1, ncol(see)) )
mdC(see)
